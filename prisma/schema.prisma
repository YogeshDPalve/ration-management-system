// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum Rating {
  WORSE
  BAD
  OK
  GOOD
  EXCELLENT
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  rationId            String   @id @unique
  adharcardNumber     String   @unique
  firstName           String
  middleName          String?
  lastName            String
  mobileNo            String   @unique
  email               String   @unique
  address             String
  password            String
  fairPriceShopNumber Int
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relations
  FamilyMembers       FamilyMembers[]
  RationAllotment     RationAllotment?
  RationNotifications RationNotification[]
  PurchaseHistory     PurchaseHistory[]
  Complaint           Complaint[]
  FPSTransaction      FPSTransaction[]
  Feedback            Feedback[]
  AllotmentHistory    AllotmentHistory[]
}

model FamilyMembers {
  id        String  @id @default(uuid())
  adharCard String  @unique
  fullName  String
  age       Int
  relation  String
  gender    Gender?
  rationId  String  @map("ration_id")
  user      User    @relation(fields: [rationId], references: [rationId])
}

model RationAllotment {
  id         String   @id @default(uuid())
  rationId   String   @unique
  wheatQuota Int      @default(0) // Monthly quota
  riceQuota  Int      @default(0)
  sugarQuota Int      @default(0)
  daalQuota  Int      @default(0)
  oilQuota   Int      @default(0)
  wheatUsed  Int      @default(0) // Used amount
  riceUsed   Int      @default(0)
  sugarUsed  Int      @default(0)
  daalUsed   Int      @default(0)
  oilUsed    Int      @default(0)
  updatedAt  DateTime @updatedAt
  createdAt  DateTime @default(now())

  // Relation with User
  user User @relation(fields: [rationId], references: [rationId])
}

model AllotmentHistory {
  id         String   @id @default(uuid())
  rationId   String
  wheatQuota Int
  riceQuota  Int
  sugarQuota Int
  daalQuota  Int
  oilQuota   Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relation with the User model
  user User @relation(fields: [rationId], references: [rationId])
}

model RationNotification {
  id        String   @id @default(uuid())
  rationId  String
  type      String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relation with User
  user User @relation(fields: [rationId], references: [rationId])
}

model PurchaseHistory {
  id             String   @id @default(uuid())
  rationId       String
  wheatPurchased Int      @default(0)
  ricePurchased  Int      @default(0)
  sugarPurchased Int      @default(0)
  daalPurchased  Int      @default(0)
  oilPurchased   Int      @default(0)
  purchaseDate   DateTime @default(now())
  fpsShopNumber  Int // Fair Price Shop Number

  // Relation with User
  user User @relation(fields: [rationId], references: [rationId])
}

model Complaint {
  id            String   @id @default(uuid())
  userName      String
  rationId      String
  shopNumber    Int // FPS shop number
  shopOwnerName String
  shopAddress   String
  proof         String[] @default([]) // URL of uploaded proof (photo/receipt)
  issueType     String // e.g., "Missing Ration", "Overcharging", "Corruption"
  description   String
  status        String   @default("pending") // pending, resolved, rejected
  createdAt     DateTime @default(now())

  // Relation with User
  user    User    @relation(fields: [rationId], references: [rationId])
  Admin   Admin?  @relation(fields: [adminId], references: [id])
  adminId String?
}

model Feedback {
  id         String   @id @default(uuid())
  rationId   String
  rating     Rating
  shopNumber Int
  message    String?
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [rationId], references: [rationId])
  Admin      Admin?   @relation(fields: [adminId], references: [id])
  adminId    String?
}

model FairPriceShop {
  id                   String                 @id @default(uuid())
  shopNumber           Int                    @unique
  ownerName            String
  location             String
  contact              String
  stockWheat           Int                    @default(0)
  stockRice            Int                    @default(0)
  stockSugar           Int                    @default(0)
  stockDaal            Int                    @default(0)
  stockOil             Int                    @default(0)
  lastUpdated          DateTime               @updatedAt
  FPSTransaction       FPSTransaction[]
  GovernmentMonitoring GovernmentMonitoring[]
  Admin                Admin?                 @relation(fields: [adminId], references: [id])
  adminId              String?
}

model FPSTransaction {
  id              String   @id @default(uuid())
  rationId        String
  shopNumber      Int
  wheatBought     Int      @default(0)
  riceBought      Int      @default(0)
  sugarBought     Int      @default(0)
  daalBought      Int      @default(0)
  oilBought       Int      @default(0)
  totalAmount     Int      @default(0)
  transactionDate DateTime @default(now())

  // Relations
  user User          @relation(fields: [rationId], references: [rationId])
  shop FairPriceShop @relation(fields: [shopNumber], references: [shopNumber])
}

model GovernmentMonitoring {
  id                String   @id @default(uuid())
  shopNumber        Int
  totalRationIssued Float    @default(0.0)
  totalTransactions Int      @default(0)
  totalComplaints   Int      @default(0)
  status            String   @default("active") // active, under review, blacklisted
  lastChecked       DateTime @updatedAt

  // Relation with FPS
  shop FairPriceShop @relation(fields: [shopNumber], references: [shopNumber])
}

model Admin {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  contact   String
  role      String   @default("admin") // admin, super-admin, monitoring-officer, etc.
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Admin privileges 
  monitoredShops    FairPriceShop[]
  handledComplaints Complaint[]
  logHistory        AdminLog[] // All actions taken by admin
  Feedback          Feedback[]
}

model AdminLog {
  id          String   @id @default(uuid())
  adminId     String
  action      String // e.g., "Updated quota", "Blacklisted shop", "Viewed complaint"
  targetId    String // ID of affected entity (user/shop/complaint/etc.)
  targetType  String // e.g., "User", "FairPriceShop", "Complaint"
  description String
  timestamp   DateTime @default(now())

  admin Admin @relation(fields: [adminId], references: [id])
}
